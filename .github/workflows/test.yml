name: Java CI

on:
  push:
    branches:
      - main
      - devel
  pull_request:
    types: [ opened, synchronize, reopened ]
    branches:
      - main
      - devel

jobs:

  test:
    timeout-minutes: 5
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        scala-version:
          - 2.11
          - 2.12
        spark-version:
          - 2.4
          - 3.1
        topology:
          - single
          - cluster
        java-version:
          - 8
          - 11
        docker-img:
          - docker.io/arangodb/arangodb:3.8.4
        exclude:
          - scala-version: 2.11
            spark-version: 3.1
          - scala-version: 2.11
            java-version: 11
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - uses: actions/setup-java@v2
        with:
          java-version: ${{matrix.java-version}}
          distribution: 'adopt'
      - name: Start Database
        run: ./docker/start_db.sh
        env:
          STARTER_MODE: ${{matrix.topology}}
          DOCKER_IMAGE: ${{matrix.docker-img}}
      - name: Cache local Maven repository
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-maven-
      - name: Info
        run: mvn -version
      - name: Test
        run: mvn -e --no-transfer-progress -Pscala-${{matrix.scala-version}} -Pspark-${{matrix.spark-version}} test
      - name: Collect docker logs on failure
        if: ${{ cancelled() || failure() }}
        uses: jwalton/gh-docker-logs@v1
        with:
          dest: './logs'
      - name: Tar logs
        if: ${{ cancelled() || failure() }}
        run: tar cvzf ./logs.tgz ./logs
      - name: Upload logs to GitHub
        if: ${{ cancelled() || failure() }}
        uses: actions/upload-artifact@master
        with:
          name: logs.tgz
          path: ./logs.tgz

  testSsl:
    timeout-minutes: 5
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        scala-version:
          - 2.11
          - 2.12
        spark-version:
          - 2.4
          - 3.1
        topology:
          - single
        java-version:
          - 8
          - 11
        docker-img:
          - docker.io/arangodb/arangodb:3.8.4
        exclude:
          - scala-version: 2.11
            spark-version: 3.1
          - scala-version: 2.11
            java-version: 11
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - uses: actions/setup-java@v2
        with:
          java-version: ${{matrix.java-version}}
          distribution: 'adopt'
      - name: Start Database
        run: ./docker/start_db.sh
        env:
          SSL: true
          STARTER_MODE: ${{matrix.topology}}
          DOCKER_IMAGE: ${{matrix.docker-img}}
      - name: Cache local Maven repository
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-maven-
      - name: Info
        run: mvn -version
      - name: Test
        run: mvn -e --no-transfer-progress -f ./integration-tests/pom.xml -Pscala-${{matrix.scala-version}} -Pspark-${{matrix.spark-version}} -Dtest=org.apache.spark.sql.arangodb.datasource.SslTest -DSslTest=true test
      - name: Collect docker logs on failure
        if: ${{ cancelled() || failure() }}
        uses: jwalton/gh-docker-logs@v1
        with:
          dest: './logs'
      - name: Tar logs
        if: ${{ cancelled() || failure() }}
        run: tar cvzf ./logs.tgz ./logs
      - name: Upload logs to GitHub
        if: ${{ cancelled() || failure() }}
        uses: actions/upload-artifact@master
        with:
          name: logs.tgz
          path: ./logs.tgz

  test-older-spark-versions:
    timeout-minutes: 10
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        include:
          - spark-version: 2.4
            scala-version: 2.11
            spark-full-version: 2.4.7
          - spark-version: 2.4
            scala-version: 2.11
            spark-full-version: 2.4.8
          - spark-version: 2.4
            scala-version: 2.12
            spark-full-version: 2.4.7
          - spark-version: 2.4
            scala-version: 2.12
            spark-full-version: 2.4.8
          - spark-version: 3.1
            scala-version: 2.12
            spark-full-version: 3.1.0
          - spark-version: 3.1
            scala-version: 2.12
            spark-full-version: 3.1.1
          - spark-version: 3.1
            scala-version: 2.12
            spark-full-version: 3.1.2
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - uses: actions/setup-java@v2
        with:
          java-version: '8'
          distribution: 'adopt'
      - name: Start Database
        run: ./docker/start_db.sh
        env:
          STARTER_MODE: cluster
          DOCKER_IMAGE: docker.io/arangodb/arangodb:3.7.16
      - name: Cache local Maven repository
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-maven-
      - name: Info
        run: mvn -version
      - name: Install
        run: mvn -e --no-transfer-progress -Pscala-${{matrix.scala-version}} -Pspark-${{matrix.spark-version}} -Dspark.version=${{matrix.spark-full-version}} -Dgpg.skip=true install
      - name: Deployment Test
        run: mvn -f ./demo/pom.xml -Pscala-${{matrix.scala-version}} -Pspark-${{matrix.spark-version}} -Dspark.version=${{matrix.spark-full-version}} test
      - name: Collect docker logs on failure
        if: ${{ cancelled() || failure() }}
        uses: jwalton/gh-docker-logs@v1
        with:
          dest: './logs'
      - name: Tar logs
        if: ${{ cancelled() || failure() }}
        run: tar cvzf ./logs.tgz ./logs
      - name: Upload logs to GitHub
        if: ${{ cancelled() || failure() }}
        uses: actions/upload-artifact@master
        with:
          name: logs.tgz
          path: ./logs.tgz

  sonar:
    timeout-minutes: 5
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        scala-version:
          - 2.12
        spark-version:
          - 3.1
        topology:
          - single
        java-version:
          - 11
        docker-img:
          - docker.io/arangodb/arangodb:3.8.4

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - uses: actions/setup-java@v2
        with:
          java-version: ${{matrix.java-version}}
          distribution: 'adopt'
      - name: Start Database
        run: ./docker/start_db.sh
        env:
          STARTER_MODE: ${{matrix.topology}}
          DOCKER_IMAGE: ${{matrix.docker-img}}
      - name: Cache SonarCloud packages
        uses: actions/cache@v2
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache local Maven repository
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-maven-
      - name: Info
        run: mvn -version
      - name: Build and analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: mvn -e --no-transfer-progress -Pscala-${{matrix.scala-version}} -Pspark-${{matrix.spark-version}} -Dgpg.skip=true -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=arangodb_arangodb-spark-datasource
